streamlit run app.py
import streamlit as st
import json
import difflib
from typing import List, Dict

# =====================================================
# SIMULA√á√ÉO DE BASE DE DADOS (voc√™ depois substituir√° pela API real)
# =====================================================
# Cada c√≥digo √© um dicion√°rio com artigos e textos.
# Voc√™ pode carregar isso via API p√∫blica no futuro.
CODES = {
    "Constitui√ß√£o Federal": {
        "Lei": "Constitui√ß√£o da Rep√∫blica Federativa do Brasil de 1988",
        "Artigos": {
            "5¬∫": "Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza...",
            "37": "A administra√ß√£o p√∫blica direta e indireta de qualquer dos Poderes..."
        }
    },
    "C√≥digo Civil": {
        "Lei": "Lei n¬∫ 10.406, de 10 de janeiro de 2002",
        "Artigos": {
            "186": "Aquele que, por a√ß√£o ou omiss√£o volunt√°ria, neglig√™ncia ou imprud√™ncia, violar direito e causar dano a outrem...",
            "927": "Aquele que, por ato il√≠cito, causar dano a outrem, fica obrigado a repar√°-lo."
        }
    },
    "C√≥digo Penal": {
        "Lei": "Decreto-Lei n¬∫ 2.848, de 7 de dezembro de 1940",
        "Artigos": {
            "121": "Matar algu√©m: Pena - reclus√£o, de seis a vinte anos.",
            "129": "Ofender a integridade corporal ou a sa√∫de de outrem..."
        }
    }
}

# =====================================================
# FUN√á√ïES AUXILIARES
# =====================================================

def buscar_artigos(codigo: str, termo: str) -> Dict[str, str]:
    """Busca literal do termo no texto dos artigos."""
    artigos_encontrados = {}
    termo_lower = termo.lower()
    for artigo, texto in CODES[codigo]["Artigos"].items():
        if termo_lower in texto.lower():
            artigos_encontrados[artigo] = texto
    return artigos_encontrados


def buscar_semelhantes(codigo: str, termo: str, limite=0.5) -> Dict[str, str]:
    """Busca aproximada (sem√¢ntica simples) com base em similaridade de strings."""
    artigos_semelhantes = {}
    termo_lower = termo.lower()
    for artigo, texto in CODES[codigo]["Artigos"].items():
        ratio = difflib.SequenceMatcher(None, termo_lower, texto.lower()).ratio()
        if limite <= ratio < 1.0:
            artigos_semelhantes[artigo] = texto
    return artigos_semelhantes


def gerar_citacao_abnt(codigo: str, artigo: str) -> str:
    """Gera refer√™ncia ABNT autom√°tica."""
    base = CODES[codigo]["Lei"]
    return f"BRASIL. {codigo}. {base}. Di√°rio Oficial da Uni√£o, Bras√≠lia, DF. Art. {artigo}."


# =====================================================
# INTERFACE STREAMLIT
# =====================================================

st.set_page_config(page_title="LexFinder ‚öñÔ∏è", page_icon="‚öñÔ∏è", layout="wide")

st.title("‚öñÔ∏è LexFinder ‚Äî Buscador Inteligente de Artigos Jur√≠dicos")
st.markdown("Pesquise por palavras-chave nos principais diplomas legais brasileiros.")

# Barra lateral (filtros)
st.sidebar.header("Filtros de busca")
codigo_escolhido = st.sidebar.selectbox("Escolher c√≥digo (opcional)", ["Todos"] + list(CODES.keys()))
termo = st.sidebar.text_input("Digite uma palavra ou express√£o", "")
botao = st.sidebar.button("Pesquisar")

if botao and termo:
    st.divider()
    st.subheader(f"üîç Resultados para: **{termo}**")

    codigos_para_buscar = list(CODES.keys()) if codigo_escolhido == "Todos" else [codigo_escolhido]
    resultados_encontrados = {}
    semelhantes_encontrados = {}

    for cod in codigos_para_buscar:
        encontrados = buscar_artigos(cod, termo)
        semelhantes = buscar_semelhantes(cod, termo)
        if encontrados:
            resultados_encontrados[cod] = encontrados
        if semelhantes:
            semelhantes_encontrados[cod] = semelhantes

    if not resultados_encontrados and not semelhantes_encontrados:
        st.warning("Nenhum artigo encontrado.")
    else:
        # Resultados exatos
        for cod, artigos in resultados_encontrados.items():
            st.markdown(f"### üìò {cod}")
            for art, texto in artigos.items():
                with st.expander(f"Art. {art}"):
                    st.write(texto)
                    citacao = gerar_citacao_abnt(cod, art)
                    st.code(citacao, language="markdown")

        # Resultados semelhantes
        if semelhantes_encontrados:
            st.markdown("---")
            st.markdown("### üí° Voc√™ tamb√©m pode se interessar por estes:")
            for cod, artigos in semelhantes_encontrados.items():
                st.markdown(f"#### üìö {cod}")
                for art, texto in artigos.items():
                    with st.expander(f"Art. {art}"):
                        st.write(texto)
                        citacao = gerar_citacao_abnt(cod, art)
                        st.code(citacao, language="markdown")

else:
    st.info("Digite um termo e clique em **Pesquisar** para come√ßar.")

# Rodap√©
st.markdown("---")
st.markdown("üë©‚Äçüíª Desenvolvido por [Seu Grupo] ‚Äî Projeto de Programa√ß√£o e Direito")
st.markdown("üìö Fonte: Dados simulados. Futuras vers√µes utilizar√£o API p√∫blica (ex: LexML).")
